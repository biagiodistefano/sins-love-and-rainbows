# Generated by Django 4.2.7 on 2023-11-30 08:48

import api.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import markdownfield.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Person',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('phone_number', models.CharField(blank=True, db_index=True, max_length=128, null=True)),
                ('from_abroad', models.BooleanField(db_index=True, default=False)),
                ('in_broadcast', models.BooleanField(db_index=True, default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'people',
                'ordering': ['first_name', 'last_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', api.models.LowerCharField(db_index=True, max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=30, unique=True)),
                ('edition', api.models.LowerCharField(db_index=True, max_length=30, unique=True)),
                ('date_and_time', models.DateTimeField(db_index=True)),
                ('location', models.CharField(blank=True, db_index=True, max_length=120, null=True)),
                ('description', markdownfield.models.MarkdownField(blank=True, default='', rendered_field='description_rendered')),
                ('description_rendered', markdownfield.models.RenderedMarkdownField(null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='logos')),
                ('closed', models.BooleanField(db_index=True, default=False)),
            ],
            options={
                'verbose_name_plural': 'parties',
                'ordering': ['-date_and_time'],
            },
        ),
        migrations.CreateModel(
            name='ShortUrl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_url', models.CharField(db_index=True, default=api.models.generate_short_url, max_length=16, unique=True)),
                ('url', models.URLField(db_index=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PartyFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=30)),
                ('file', models.FileField(db_index=True, upload_to='files')),
                ('description', models.CharField(blank=True, db_index=True, max_length=250, null=True)),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.party')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', markdownfield.models.MarkdownField(rendered_field='text_rendered')),
                ('text_rendered', markdownfield.models.RenderedMarkdownField()),
                ('sent_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.party')),
                ('sent_to', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('F', 'Food'), ('D', 'Drink'), ('O', 'Other')], db_index=True, max_length=30)),
                ('name', models.CharField(db_index=True, max_length=120)),
                ('quantity', models.CharField(blank=True, db_index=True, max_length=30, null=True)),
                ('description', models.CharField(blank=True, db_index=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, db_index=True, null=True)),
                ('assigned_to', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('ingredients', models.ManyToManyField(blank=True, to='api.ingredient')),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.party')),
            ],
        ),
        migrations.CreateModel(
            name='Invite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Y', 'Yes'), ('N', 'No'), ('M', 'Maybe')], db_index=True, default='M', max_length=1)),
                ('last_updated', models.DateTimeField(auto_now=True, db_index=True)),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.party')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-status', 'person__first_name', 'person__last_name'],
            },
        ),
        migrations.AddField(
            model_name='ingredient',
            name='items',
            field=models.ManyToManyField(to='api.item'),
        ),
        migrations.CreateModel(
            name='ExternalLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=30)),
                ('url', models.URLField(db_index=True)),
                ('description', models.CharField(blank=True, db_index=True, max_length=250, null=True)),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.party')),
            ],
        ),
        migrations.CreateModel(
            name='Allergy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingredient', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.ingredient')),
                ('people', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'allergies',
            },
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['party', 'category'], name='api_item_party_i_07da32_idx'),
        ),
        migrations.AddIndex(
            model_name='invite',
            index=models.Index(fields=['person', 'party'], name='api_invite_person__ca11f7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='invite',
            unique_together={('person', 'party')},
        ),
    ]
